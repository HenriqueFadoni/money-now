{"version":3,"sources":["img/New-jumbo.mp4","store/actions/getData.js","store/actions/actionTypes.js","mainPage/Title/Title.js","mainPage/BackgroundVideo/BackgroundVideo.js","mainPage/Form/Selectors/Base/BaseCurrencySelector.js","mainPage/Form/Selectors/Currency/ToCurrencySelector.js","mainPage/Form/Button/FindRate.js","mainPage/Form/Inputs/Base/BaseInput.js","mainPage/Form/Inputs/Currency/CurrencyInput.js","mainPage/Form/Form.js","App.js","store/actions/findRate.js","serviceWorker.js","store/reducers/getData.js","store/reducers/findRate.js","store/reducers/index.js","index.js"],"names":["module","exports","__webpack_require__","p","updateSuccess","currencyExchange","type","Title","react_default","a","createElement","className","BackgroundVideo","autoPlay","muted","loop","src","videoMP4","videoOGV","videoWEBM","BaseCurrencySelector","props","id","onChange","event","selectHandler","required","value","rates","ToCurrencySelector","FindRate","Fragment","show","disabled","connect","state","findRate","baseValue","currencyValue","Form","inputs","Base_BaseInput","Currency_CurrencyInput","onSubmit","showInputs","Button_FindRate","showBtn","App","showInput","selectBaseHandler","_this","onUpdate","target","baseExchange","selectToHandler","onFindRateSelect","preventDefault","currentTarget","reset","onFindRateCalc","toCurrency","setState","this","onGetData","Object","keys","sort","arrayRates","button","length","map","rate","key","mainPage_BackgroundVideo_BackgroundVideo","mainPage_Title_Title","Base_BaseCurrencySelector","Currency_ToCurrencySelector","mainPage_Form_Form","Component","getData","error","dispatch","_ref","asyncToGenerator","regenerator_default","mark","_callee","_ref2","data","wrap","_context","prev","next","axios","get","sent","t0","stop","_x","apply","arguments","currency","_ref3","_callee2","_ref4","_update","_context2","concat","update","objectSpread","base","date","_x2","action","rateValue","findRateResult","Math","round","Boolean","window","location","hostname","match","initialState","reducer","undefined","getDataStart","getDataSuccess","getDataFail","updateFail","findRateSelect","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","reduxThunk","app","es","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uOC2ClCC,EAAgB,SAAAC,GAClB,MAAO,CACHC,KCrCsB,iBDsCtBD,qBEtCOE,EAND,kBACVC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,SACUH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,yBCaCC,EAXS,kBACpBJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,oBAAoBE,UAAQ,EAACC,OAAK,EAACC,MAAI,GACpDP,EAAAC,EAAAC,cAAA,UAAQM,IAAKC,IAAUX,KAAK,cAC5BE,EAAAC,EAAAC,cAAA,UAAQM,IAAKE,IAAUZ,KAAK,cAC5BE,EAAAC,EAAAC,cAAA,UAAQM,IAAKG,IAAWb,KAAK,eAHjC,oCCMOc,EAZc,SAAAC,GAAK,OAC9Bb,EAAAC,EAAAC,cAAA,UACIY,GAAG,yBACHX,UAAU,iBACVY,SAAU,SAAAC,GAAK,OAAIH,EAAMI,cAAcD,IACvCE,UAAQ,GAERlB,EAAAC,EAAAC,cAAA,UAAQiB,MAAM,OAAd,uBACCN,EAAMO,QCIAC,EAZY,SAAAR,GAAK,OAC5Bb,EAAAC,EAAAC,cAAA,UACIY,GAAG,uBACHX,UAAU,iBACVY,SAAU,SAAAC,GAAK,OAAIH,EAAMI,cAAcD,IACvCE,UAAQ,GAERlB,EAAAC,EAAAC,cAAA,UAAQiB,MAAM,WAAd,qBACCN,EAAMO,QCQAE,EAhBE,SAAAT,GAAK,OAClBb,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsB,SAAA,KAEQV,EAAMW,KACNxB,EAAAC,EAAAC,cAAA,UAAQJ,KAAK,SAASK,UAAU,oBAC5BH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,iBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0BAAhB,gBAGJH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAmBsB,UAAQ,GAA7C,uBCIGC,cANS,SAAAC,GACpB,MAAO,CACH9B,iBAAkB8B,EAAMC,WAIjBF,CAZG,SAAAb,GAAK,OACnBb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBACTU,EAAMhB,iBAAiBgC,aCUjBH,cANS,SAAAC,GACpB,MAAO,CACH9B,iBAAkB8B,EAAMC,WAIjBF,CAZO,SAAAb,GAAK,OACvBb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBACTU,EAAMhB,iBAAiBiC,iBCiBjBC,EAhBF,SAAAlB,GACT,IAAImB,EACAhC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsB,SAAA,KACIvB,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,OAIR,OACIlC,EAAAC,EAAAC,cAAA,QAAMiC,SAAU,SAAAnB,GAAK,OAAIH,EAAMe,SAASZ,KACnCH,EAAMuB,WAAaJ,EAAS,KAC7BhC,EAAAC,EAAAC,cAACmC,EAAD,CAAUb,KAAMX,EAAMyB,YCN5BC,oNACJZ,MAAQ,CACNa,WAAW,KAObC,kBAAoB,SAAAzB,GAClB0B,EAAK7B,MAAM8B,SAAS3B,EAAM4B,OAAOzB,MAAOuB,EAAK7B,MAAMgC,iBAGrDC,gBAAkB,SAAA9B,GAChB0B,EAAK7B,MAAMkC,iBAAiB/B,EAAM4B,OAAOzB,UAG3CS,SAAW,SAAAZ,GACTA,EAAMgC,iBACNhC,EAAMiC,cAAcC,QAEpBR,EAAK7B,MAAMsC,eAAeT,EAAK7B,MAAMgC,aAAazB,MAAMsB,EAAK7B,MAAMhB,iBAAiBuD,aAEpFV,EAAKW,SAAS,CAAEb,WAAW,wFAjB3Bc,KAAKzC,MAAM0C,6CAqBX,IAAInC,EAAQoC,OAAOC,KAAKH,KAAKzC,MAAMgC,aAAazB,OAAOsC,OACnDC,EAAa,GACbC,GAAS,EAgBb,OAdKD,EAAWE,SACdF,EAAavC,EAAM0C,IAAI,SAAAC,GAAI,OACzB/D,EAAAC,EAAAC,cAAA,UACEiB,MAAO4C,EACPC,IAAKD,GACJA,MAKHT,KAAKzC,MAAMhB,iBAAiBuD,aAC9BQ,GAAS,GAIT5D,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsB,SAAA,KACEvB,EAAAC,EAAAC,cAAC+D,EAAD,MAEAjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACgE,EAAD,MAEAlE,EAAAC,EAAAC,cAAA,WAASC,UAAU,QACjBH,EAAAC,EAAAC,cAACiE,EAAD,CACE/C,MAAOuC,EACP1C,cAAeqC,KAAKb,oBAEtBzC,EAAAC,EAAAC,cAACkE,EAAD,CACEhD,MAAOuC,EACP1C,cAAeqC,KAAKR,kBAEtB9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACmE,EAAD,CACEzC,SAAU0B,KAAK1B,SACfQ,WAAYkB,KAAK3B,MAAMa,UACvBF,QAASsB,eAjEPU,cA2FH5C,cAjBS,SAAAC,GACtB,MAAO,CACLkB,aAAclB,EAAM4C,QACpB1E,iBAAkB8B,EAAMC,SACxB4C,MAAO7C,EAAM4C,QAAQC,QAIE,SAAAC,GACzB,MAAO,CACLlB,UAAW,kBAAMkB,EVpEjB,eAAAC,EAAAlB,OAAAmB,EAAA,EAAAnB,CAAAoB,EAAA3E,EAAA4E,KAAO,SAAAC,EAAOL,GAAP,IAAAM,EAAAC,EAAA,OAAAJ,EAAA3E,EAAAgF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACHX,EArBG,CACH3E,KCNsB,mBDyBnBoF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAIwBC,IAAMC,IAAI,0CAJlC,OAAAP,EAAAG,EAAAK,KAISP,EAJTD,EAISC,KACRP,EAnBD,CACH3E,KCXwB,mBDYxBD,iBAiB4BmF,IALzBE,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAQCT,EAfD,CACH3E,KCjBqB,gBDkBrB0E,MAYuB,0CAPpB,iCAAAU,EAAAO,SAAAX,EAAA,iBAAP,gBAAAY,GAAA,OAAAhB,EAAAiB,MAAArC,KAAAsC,YAAA,KUqEAjD,SAAU,SAACkD,EAAUhD,GAAX,OAA4B4B,EVvCpB,SAACoB,EAAUhG,GAC7B,sBAAAiG,EAAAtC,OAAAmB,EAAA,EAAAnB,CAAAoB,EAAA3E,EAAA4E,KAAO,SAAAkB,EAAOtB,GAAP,IAAAuB,EAAAhB,EAAAiB,EAAA,OAAArB,EAAA3E,EAAAgF,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,cAAAc,EAAAf,KAAA,EAAAe,EAAAd,KAAA,EAEwBC,IAAMC,IAAN,+CAAAa,OAAyDN,IAFjF,OAAAG,EAAAE,EAAAX,KAESP,EAFTgB,EAEShB,KACJoB,EAHL5C,OAAA6C,EAAA,EAAA7C,CAAA,GAIQ3D,EAJR,CAKKyG,KAAMtB,EAAKsB,KACXC,KAAMvB,EAAKuB,KACXnF,MAAO4D,EAAK5D,QAEhBqD,EAAS7E,EAAcwG,IATxBF,EAAAd,KAAA,gBAAAc,EAAAf,KAAA,EAAAe,EAAAV,GAAAU,EAAA,SAYCzB,EAnBD,CACH3E,KC3CmB,cD4CnB0E,MAgBuB,yBAXpB,iCAAA0B,EAAAT,SAAAM,EAAA,iBAAP,gBAAAS,GAAA,OAAAV,EAAAH,MAAArC,KAAAsC,YAAA,GUsC+Ca,CAAcZ,EAAUhD,KACvEE,iBAAkB,SAAAgB,GAAI,OAAIU,EC/FA,SAAAV,GAC1B,MAAO,CACHjE,KVSwB,mBURxBsD,WAAYW,GD4FmB0C,CAAsB1C,KACzDZ,eAAgB,SAAAY,GAAI,OAAIU,GCjFAiC,EDiF6B3C,EChF9C,SAAAU,GAEHA,EAXe,SAAAiC,GACnB,MAAO,CACH5G,KVGwB,mBUFxB+B,UAAW,EACXC,cAAe4E,GAONC,CADKC,KAAKC,MAAkB,IAAZH,GAAmB,SAFxB,IAAAA,KDqFbhF,CAA6Ca,GE1FxCuE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8EChBAC,EAAe,CACjBb,KAAM,GACNC,KAAM,GACNnF,MAAO,IAmDIgG,EAXC,WAAkC,IAAjCzF,EAAiCiE,UAAA/B,OAAA,QAAAwD,IAAAzB,UAAA,GAAAA,UAAA,GAAzBuB,EAAcV,EAAWb,UAAA/B,OAAA,EAAA+B,UAAA,QAAAyB,EAC9C,OAAOZ,EAAO3G,MACV,IZ7CsB,iBY6CW,OAtCpB,SAAA6B,GACjB,OAAO6B,OAAA6C,EAAA,EAAA7C,CAAA,GACA7B,GAoCqC2F,CAAa3F,GACrD,IZ7CwB,mBY6CW,OAjCpB,SAACA,EAAO8E,GAC3B,OAAOjD,OAAA6C,EAAA,EAAA7C,CAAA,GACA7B,EACA8E,EAAO5G,kBA8BgC0H,CAAe5F,EAAO8E,GAChE,IZ7CqB,gBY6CW,OA3BpB,SAAC9E,EAAO8E,GACxB,OAAOjD,OAAA6C,EAAA,EAAA7C,CAAA,GACA7B,EADP,CAEI6C,MAAOiC,EAAOjC,QAwByBgD,CAAY7F,EAAO8E,GAC1D,IZ1CsB,iBY0CW,OApBnB,SAAC9E,EAAO8E,GAC1B,OAAOjD,OAAA6C,EAAA,EAAA7C,CAAA,GACA7B,EACA8E,EAAO5G,kBAiB8BD,CAAc+B,EAAO8E,GAC7D,IZ1CmB,cY0CW,OAdnB,SAAC9E,EAAO8E,GACvB,OAAOjD,OAAA6C,EAAA,EAAA7C,CAAA,GACA7B,EADP,CAEI6C,MAAOiC,EAAOjC,QAWuBiD,CAAW9F,EAAO8E,GACvD,QAAS,OAAO9E,IClDlBwF,EAAe,CACjB/D,WAAY,KACZvB,UAAW,EACXC,cAAe,GA0BJsF,EARC,WAAkC,IAAjCzF,EAAiCiE,UAAA/B,OAAA,QAAAwD,IAAAzB,UAAA,GAAAA,UAAA,GAAzBuB,EAAcV,EAAWb,UAAA/B,OAAA,EAAA+B,UAAA,QAAAyB,EAC9C,OAAOZ,EAAO3G,MACV,IbZwB,mBaYW,OAjBpB,SAAC6B,EAAO8E,GAC3B,OAAOjD,OAAA6C,EAAA,EAAA7C,CAAA,GACA7B,EADP,CAEIyB,WAAYqD,EAAOrD,aAcuBsE,CAAe/F,EAAO8E,GAChE,IbZwB,mBaYW,OAXpB,SAAC9E,EAAO8E,GAC3B,OAAOjD,OAAA6C,EAAA,EAAA7C,CAAA,GACA7B,EADP,CAEIE,UAAW4E,EAAO5E,UAClBC,cAAe2E,EAAO3E,gBAOoB6E,CAAehF,EAAO8E,GAChE,QAAS,OAAO9E,ICtBXgG,EAAcC,YAAiB,CACxCrD,QAASA,EACT3C,SAAUA,ICIRiG,EAAkHC,IAElHC,EAAQC,YAAYL,EAAaE,EACnCI,YAAgBC,OAGdC,EACFnI,EAAAC,EAAAC,cAACkI,EAAA,EAAD,CAAUL,MAAOA,GACb/H,EAAAC,EAAAC,cAACmI,EAAD,OAIRC,IAASC,OAAOJ,EAAKK,SAASC,eAAe,SJ0GvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bae1ef45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/New-jumbo.3d3d387b.mp4\";","import axios from 'axios';\nimport * as actionTypes from './actionTypes';\n\n// -----------------------------------------------\n// FETCH DATA FROM THE SERVER AND INITIALIZE THE STATE\n\nconst getDataStart = () => {\n    return {\n        type: actionTypes.GET_DATA_START\n    };\n};\n\nconst getDataSuccess = currencyExchange => {\n    return {\n        type: actionTypes.GET_DATA_SUCCESS,\n        currencyExchange\n    };\n};\n\nconst getDataFail = error => {\n    return {\n        type: actionTypes.GET_DATA_FAIL,\n        error: error\n    };\n};\n\nexport const getData = () => {\n    return async (dispatch) => {\n        dispatch(getDataStart());\n\n        try {\n            const { data } = await axios.get('https://api.exchangeratesapi.io/latest');\n            dispatch(getDataSuccess(data));\n        } catch (error) {\n            let errorMessage = 'Something Went Wrong. Try again later'\n            dispatch(getDataFail(errorMessage));\n        };\n    };\n};\n\n// ---------------------------------------\n// UPDATE THE STATE BASED ON THE CURRENCY\n\nconst updateSuccess = currencyExchange => {\n    return {\n        type: actionTypes.UPDATE_SUCCESS,\n        currencyExchange\n    };\n};\n\nconst updateFail = error => {\n    return {\n        type: actionTypes.UPDATE_FAIL,\n        error\n    };\n};\n\nexport const update = (currency, currencyExchange) => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios.get(`https://api.exchangeratesapi.io/latest?base=${currency}`);\n            let update = {\n                ...currencyExchange,\n                base: data.base,\n                date: data.date,\n                rates: data.rates\n            };\n            dispatch(updateSuccess(update));\n        } catch (error) {\n            let errorMessage = 'Something Went Wrong';\n            dispatch(updateFail(errorMessage));\n        };\n    };\n};","// GET DATA\n\nexport const GET_DATA_START = 'GET_DATA_START';\nexport const GET_DATA_SUCCESS = 'GET_DATA_SUCCESS';\nexport const GET_DATA_FAIL = 'GET_DATA_FAIL';\n\n// UPDATE\n\nexport const UPDATE_SUCCESS = 'UPDATE_SUCCESS';\nexport const UPDATE_FAIL = 'UPDATE_FAIL';\n\n// FIND RATE\n\nexport const FIND_RATE_SELECT = 'FIND_RATE_SELECT';\nexport const FIND_RATE_RESULT = 'FIND_RATE_RESULT';","import React from 'react';\n\nconst Title = () => (\n    <h1 className=\"h1-white\">\n        money <span className=\"text-green\">now</span>\n    </h1>\n);\n\nexport default Title;","import React from 'react';\n\nimport videoMP4 from '../../img/New-jumbo.mp4';\nimport videoWEBM from '../../img/New-jumbo.mp4';\nimport videoOGV from '../../img/New-jumbo.mp4';\n\nconst BackgroundVideo = () => (\n    <div className=\"bg-video\">\n        <video className=\"bg-video__content\" autoPlay muted loop>\n            <source src={videoMP4} type=\"video/mp4\" />\n            <source src={videoOGV} type=\"video/ogv\" />\n            <source src={videoWEBM} type=\"video/webm\" />\n            Your browser is not supported!\n          </video>\n    </div>\n);\n\nexport default BackgroundVideo;","import React from 'react';\n\nconst BaseCurrencySelector = props => (\n    <select \n        id=\"base-currency-selector\" \n        className=\"form__selector\"\n        onChange={event => props.selectHandler(event)}\n        required>\n\n        <option value=\"EUR\">Default Value(EURO)</option>\n        {props.rates}\n    </select>\n);\n\nexport default BaseCurrencySelector;","import React from 'react';\n\nconst ToCurrencySelector = props => (\n    <select \n        id=\"to-currency-selector\" \n        className=\"form__selector\"\n        onChange={event => props.selectHandler(event)}\n        required>\n\n        <option value=\"Default\">Select a Currency</option>\n        {props.rates}\n    </select>\n);\n\nexport default ToCurrencySelector;","import React from 'react';\n\nconst FindRate = props => (\n    <>\n        {\n            props.show ?\n            <button type=\"submit\" className=\"btn form__button\">\n                <span className=\"form__button-visible\">Find Currency</span>\n                <span className=\"form__button-invisible\">Find it Now</span>\n            </button>\n            :\n            <button className=\"btn form__button\" disabled>\n                Select a Currency\n            </button>\n        }\n    </>\n);\n\nexport default FindRate;","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst BaseInput = props => (\n    <h2 className=\"h2-white form__result\">\n        {props.currencyExchange.baseValue}\n    </h2>\n);\n\nconst mapStateToProps = state => {\n    return {\n        currencyExchange: state.findRate\n    }\n}\n\nexport default connect(mapStateToProps)(BaseInput);","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst CurrencyInput = props => (\n    <h2 className=\"h2-green form__result\">\n        {props.currencyExchange.currencyValue}\n    </h2>\n);\n\nconst mapStateToProps = state => {\n    return {\n        currencyExchange: state.findRate\n    }\n}\n\nexport default connect(mapStateToProps)(CurrencyInput);","import React from 'react';\n\nimport FindRate from './Button/FindRate';\nimport BaseInput from './Inputs/Base/BaseInput';\nimport CurrencyInput from './Inputs/Currency/CurrencyInput';\n\nconst Form = props => {\n    let inputs = (\n        <>\n            <BaseInput />\n            <CurrencyInput />\n        </>\n    );\n\n    return (\n        <form onSubmit={event => props.findRate(event)}>\n            {props.showInputs ? inputs : null}\n            <FindRate show={props.showBtn} />\n        </form>\n    );\n};\n\nexport default Form;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as action from './store/actions/index';\n\nimport Title from './mainPage/Title/Title';\nimport BackgroundVideo from './mainPage/BackgroundVideo/BackgroundVideo';\nimport BaseCurrencySelector from './mainPage/Form/Selectors/Base/BaseCurrencySelector';\nimport ToCurrencySelector from './mainPage/Form/Selectors/Currency/ToCurrencySelector';\nimport Form from './mainPage/Form/Form';\nimport './sass/main.scss';\n\nclass App extends Component {\n  state = {\n    showInput: false\n  }\n\n  componentDidMount() {\n    this.props.onGetData();\n  };\n\n  selectBaseHandler = event => {\n    this.props.onUpdate(event.target.value, this.props.baseExchange);\n  }\n\n  selectToHandler = event => {\n    this.props.onFindRateSelect(event.target.value);\n  };\n\n  findRate = event => {\n    event.preventDefault();\n    event.currentTarget.reset();\n\n    this.props.onFindRateCalc(this.props.baseExchange.rates[this.props.currencyExchange.toCurrency]);\n\n    this.setState({ showInput: true });\n  }\n\n  render() {\n    let rates = Object.keys(this.props.baseExchange.rates).sort();\n    let arrayRates = [];\n    let button = false;\n\n    if (!arrayRates.length) {\n      arrayRates = rates.map(rate => (\n        <option\n          value={rate}\n          key={rate}>\n          {rate}\n        </option>\n      ));\n    }\n\n    if (this.props.currencyExchange.toCurrency) {\n      button = true;\n    }\n\n    return (\n      <>\n        <BackgroundVideo />\n\n        <div className=\"home\">\n          <Title />\n\n          <section className=\"form\">\n            <BaseCurrencySelector\n              rates={arrayRates}\n              selectHandler={this.selectBaseHandler} />\n\n            <ToCurrencySelector\n              rates={arrayRates}\n              selectHandler={this.selectToHandler} />\n\n            <div className=\"form__display\">\n              <Form\n                findRate={this.findRate}\n                showInputs={this.state.showInput}\n                showBtn={button} />\n            </div>\n          </section>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    baseExchange: state.getData,\n    currencyExchange: state.findRate,\n    error: state.getData.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onGetData: () => dispatch(action.getData()),\n    onUpdate: (currency, baseExchange) => dispatch(action.update(currency, baseExchange)),\n    onFindRateSelect: rate => dispatch(action.findRateSelect(rate)),\n    onFindRateCalc: rate => dispatch(action.findRateCalc(rate))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import * as actionTypes from './actionTypes';\n\nexport const findRateSelect = rate => {\n    return {\n        type: actionTypes.FIND_RATE_SELECT,\n        toCurrency: rate\n    };\n};\n\nconst findRateResult = rateValue => {\n    return {\n        type: actionTypes.FIND_RATE_RESULT,\n        baseValue: 1,\n        currencyValue: rateValue\n    };\n};\n\nexport const findRateCalc = rateValue => {\n    return dispatch => {\n        const value = Math.round(rateValue * 100) / 100;\n        dispatch(findRateResult(value));\n    };\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    base: '',\n    date: '',\n    rates: {}\n}\n\n//GET DATA\nconst getDataStart = state => {\n    return {\n        ...state\n    };\n};\n\nconst getDataSuccess = (state, action) => {\n    return {\n        ...state,\n        ...action.currencyExchange\n    };\n};\n\nconst getDataFail = (state, action) => {\n    return {\n        ...state,\n        error: action.error\n    };\n};\n\n//UPDATE\nconst updateSuccess = (state, action) => {\n    return {\n        ...state,\n        ...action.currencyExchange\n    };\n};\n\nconst updateFail = (state, action) => {\n    return {\n        ...state,\n        error: action.error\n    };\n};\n\n//REDUCER\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case actionTypes.GET_DATA_START: return getDataStart(state);\n        case actionTypes.GET_DATA_SUCCESS: return getDataSuccess(state, action);\n        case actionTypes.GET_DATA_FAIL: return getDataFail(state, action);\n        case actionTypes.UPDATE_SUCCESS: return updateSuccess(state, action);\n        case actionTypes.UPDATE_FAIL: return updateFail(state, action);\n        default: return state;\n    }\n}\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    toCurrency: null,\n    baseValue: 0,\n    currencyValue: 0\n}\n\nconst findRateSelect = (state, action) => {\n    return {\n        ...state,\n        toCurrency: action.toCurrency\n    }\n}\n\nconst findRateResult = (state, action) => {\n    return {\n        ...state,\n        baseValue: action.baseValue,\n        currencyValue: action.currencyValue\n    }\n}\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case actionTypes.FIND_RATE_SELECT: return findRateSelect(state, action);\n        case actionTypes.FIND_RATE_RESULT: return findRateResult(state, action);\n        default: return state;\n    }\n}\n\nexport default reducer;","import { combineReducers } from 'redux';\n\nimport getData from './getData';\nimport findRate from './findRate';\n\nexport const rootReducer = combineReducers ({\n    getData: getData,\n    findRate: findRate\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport { rootReducer } from './store/reducers/index';\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(reduxThunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}