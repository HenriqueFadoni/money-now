{"version":3,"sources":["img/New-jumbo.mp4","store/actions/getData.js","store/actions/actionTypes.js","mainPage/Title/Title.js","mainPage/BackgroundVideo/BackgroundVideo.js","mainPage/Form/Selectors/Base/BaseCurrencySelector.js","mainPage/Form/Selectors/Currency/ToCurrencySelector.js","mainPage/Form/Button/FindRate.js","mainPage/Form/Inputs/Base/BaseInput.js","mainPage/Form/Inputs/Currency/CurrencyInput.js","mainPage/Form/Form.js","App.js","store/actions/findRate.js","serviceWorker.js","store/reducers/getData.js","store/reducers/findRate.js","store/reducers/index.js","index.js"],"names":["module","exports","__webpack_require__","p","updateSuccess","currencyExchange","type","Title","react_default","a","createElement","className","BackgroundVideo","autoPlay","muted","loop","src","videoMP4","videoOGV","videoWEBM","BaseCurrencySelector","props","id","onChange","event","selectHandler","required","value","hidden","rates","ToCurrencySelector","FindRate","Fragment","show","disabled","connect","state","findRate","baseValue","currencyValue","Form","inputs","Base_BaseInput","Currency_CurrencyInput","onSubmit","showInputs","Button_FindRate","showBtn","App","showInput","selectBaseHandler","_this","onUpdate","target","baseExchange","selectToHandler","onFindRateSelect","preventDefault","currentTarget","reset","onFindRateCalc","toCurrency","setState","this","onGetData","arrayRates","button","rate","push","concat","key","mainPage_BackgroundVideo_BackgroundVideo","mainPage_Title_Title","Base_BaseCurrencySelector","Currency_ToCurrencySelector","mainPage_Form_Form","Component","getData","error","dispatch","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","_ref2","data","_update","wrap","_context","prev","next","axios","get","sent","update","base","date","t0","stop","_x","apply","arguments","currency","_ref3","_callee2","_ref4","_update2","_context2","objectSpread","_x2","action","rateValue","findRateResult","Math","round","Boolean","window","location","hostname","match","initialState","reducer","length","undefined","getDataStart","getDataSuccess","getDataFail","updateFail","findRateSelect","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","reduxThunk","app","es","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a8e4dd2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/New-jumbo.3d3d387b.mp4\";","import axios from 'axios';\nimport * as actionTypes from './actionTypes';\n\n// -----------------------------------------------\n// FETCH DATA FROM THE SERVER AND INITIALIZE THE STATE\n\nconst getDataStart = () => {\n    return {\n        type: actionTypes.GET_DATA_START\n    };\n};\n\nconst getDataSuccess = currencyExchange => {\n    return {\n        type: actionTypes.GET_DATA_SUCCESS,\n        currencyExchange\n    };\n};\n\nconst getDataFail = error => {\n    return {\n        type: actionTypes.GET_DATA_FAIL,\n        error: error\n    };\n};\n\nexport const getData = () => {\n    return async (dispatch) => {\n        dispatch(getDataStart());\n\n        try {\n            const { data } = await axios.get(`https://api.exchangeratesapi.io/latest`);\n            let update = {\n                base: 'EUR',\n                date: '',\n                rates: data.rates\n            };\n\n            dispatch(getDataSuccess(update));\n        } catch (error) {\n            let errorMessage = 'Something Went Wrong. Try again later'\n            dispatch(getDataFail(errorMessage));\n        };\n    };\n};\n\n// ---------------------------------------\n// UPDATE THE STATE BASED ON THE CURRENCY\n\nconst updateSuccess = currencyExchange => {\n    return {\n        type: actionTypes.UPDATE_SUCCESS,\n        currencyExchange\n    };\n};\n\nconst updateFail = error => {\n    return {\n        type: actionTypes.UPDATE_FAIL,\n        error\n    };\n};\n\nexport const update = (currency, currencyExchange) => {\n    return async (dispatch) => {\n        try {\n            const { data } = await axios.get(`https://api.exchangeratesapi.io/latest?base=${currency}`);\n            let update = {\n                ...currencyExchange,\n                base: data.base,\n                date: data.date,\n                rates: data.rates\n            };\n            dispatch(updateSuccess(update));\n        } catch (error) {\n            let errorMessage = 'Something Went Wrong';\n            dispatch(updateFail(errorMessage));\n        };\n    };\n};","// GET DATA\n\nexport const GET_DATA_START = 'GET_DATA_START';\nexport const GET_DATA_SUCCESS = 'GET_DATA_SUCCESS';\nexport const GET_DATA_FAIL = 'GET_DATA_FAIL';\n\n// UPDATE\n\nexport const UPDATE_SUCCESS = 'UPDATE_SUCCESS';\nexport const UPDATE_FAIL = 'UPDATE_FAIL';\n\n// FIND RATE\n\nexport const FIND_RATE_SELECT = 'FIND_RATE_SELECT';\nexport const FIND_RATE_RESULT = 'FIND_RATE_RESULT';","import React from 'react';\n\nconst Title = () => (\n    <h1 className=\"h1-white\">\n        money <span className=\"text-green\">now</span>\n    </h1>\n);\n\nexport default Title;","import React from 'react';\n\nimport videoMP4 from '../../img/New-jumbo.mp4';\nimport videoWEBM from '../../img/New-jumbo.mp4';\nimport videoOGV from '../../img/New-jumbo.mp4';\n\nconst BackgroundVideo = () => (\n    <div className=\"bg-video\">\n        <video className=\"bg-video__content\" autoPlay muted loop>\n            <source src={videoMP4} type=\"video/mp4\" />\n            <source src={videoOGV} type=\"video/ogv\" />\n            <source src={videoWEBM} type=\"video/webm\" />\n            Your browser is not supported!\n          </video>\n    </div>\n);\n\nexport default BackgroundVideo;","import React from 'react';\n\nconst BaseCurrencySelector = props => (\n    <select \n        id=\"base-currency-selector\" \n        className=\"form__selector\"\n        onChange={event => props.selectHandler(event)}\n        required>\n\n        <option value=\"EUR-D\" hidden>Default Value(EURO)</option>\n        {props.rates}\n    </select>\n);\n\nexport default BaseCurrencySelector;","import React from 'react';\n\nconst ToCurrencySelector = props => (\n    <select \n        id=\"to-currency-selector\" \n        className=\"form__selector\"\n        onChange={event => props.selectHandler(event)}\n        required>\n\n        <option value=\"Default\">Select a Currency</option>\n        {props.rates}\n    </select>\n);\n\nexport default ToCurrencySelector;","import React from 'react';\n\nconst FindRate = props => (\n    <>\n        {\n            props.show ?\n            <button type=\"submit\" className=\"btn form__button\">\n                <span className=\"form__button-visible\">Find Currency</span>\n                <span className=\"form__button-invisible\">Find it Now</span>\n            </button>\n            :\n            <button className=\"btn form__button\" disabled>\n                Select a Currency\n            </button>\n        }\n    </>\n);\n\nexport default FindRate;","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst BaseInput = props => (\n    <h2 className=\"h2-white form__result\">\n        {props.currencyExchange.baseValue}\n    </h2>\n);\n\nconst mapStateToProps = state => {\n    return {\n        currencyExchange: state.findRate\n    }\n}\n\nexport default connect(mapStateToProps)(BaseInput);","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst CurrencyInput = props => (\n    <h2 className=\"h2-green form__result\">\n        {props.currencyExchange.currencyValue}\n    </h2>\n);\n\nconst mapStateToProps = state => {\n    return {\n        currencyExchange: state.findRate\n    }\n}\n\nexport default connect(mapStateToProps)(CurrencyInput);","import React, { PureComponent } from 'react';\n\nimport FindRate from './Button/FindRate';\nimport BaseInput from './Inputs/Base/BaseInput';\nimport CurrencyInput from './Inputs/Currency/CurrencyInput';\n\nconst Form = props => {\n    let inputs = (\n        <>\n            <BaseInput />\n            <CurrencyInput />\n        </>\n    );\n\n    return (\n        <form onSubmit={event => props.findRate(event)}>\n            {props.showInputs ? inputs : null}\n            <FindRate show={props.showBtn} />\n        </form>\n    );\n};\n\nexport default Form;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as action from './store/actions/index';\n\nimport Title from './mainPage/Title/Title';\nimport BackgroundVideo from './mainPage/BackgroundVideo/BackgroundVideo';\nimport BaseCurrencySelector from './mainPage/Form/Selectors/Base/BaseCurrencySelector';\nimport ToCurrencySelector from './mainPage/Form/Selectors/Currency/ToCurrencySelector';\nimport Form from './mainPage/Form/Form';\nimport './sass/main.scss';\n\nclass App extends Component {\n  state = {\n    showInput: false\n  }\n\n  componentDidMount() {\n    this.props.onGetData();\n  };\n\n  selectBaseHandler = event => {\n    this.props.onUpdate(event.target.value, this.props.baseExchange);\n  }\n\n  selectToHandler = event => {\n    this.props.onFindRateSelect(event.target.value);\n  };\n\n  findRate = event => {\n    event.preventDefault();\n    event.currentTarget.reset();\n\n    this.props.onFindRateCalc(this.props.baseExchange.rates[this.props.currencyExchange.toCurrency]);\n\n    this.setState({ showInput: true });\n  }\n\n  render() {\n    const rates = this.props.baseExchange.rates;\n    let arrayRates = [];\n    let button = false;\n\n    for (let rate in rates) {\n      arrayRates.push(\n        <option\n          value={`${rate}`}\n          key={`${rate}`}>\n          {rate}\n        </option>\n      );\n    }\n\n    if (this.props.currencyExchange.toCurrency) {\n      button = true;\n    }\n\n    return (\n      <>\n        <BackgroundVideo />\n\n        <div className=\"home\">\n          <Title />\n\n          <section className=\"form\">\n            <BaseCurrencySelector\n              rates={arrayRates}\n              selectHandler={this.selectBaseHandler} />\n\n            <ToCurrencySelector\n              rates={arrayRates}\n              selectHandler={this.selectToHandler} />\n\n            <div className=\"form__display\">\n              <Form\n                findRate={this.findRate}\n                showInputs={this.state.showInput}\n                showBtn={button} />\n            </div>\n          </section>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    baseExchange: state.getData,\n    currencyExchange: state.findRate,\n    error: state.getData.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onGetData: () => dispatch(action.getData()),\n    onUpdate: (currency, baseExchange) => dispatch(action.update(currency, baseExchange)),\n    onFindRateSelect: rate => dispatch(action.findRateSelect(rate)),\n    onFindRateCalc: rate => dispatch(action.findRateCalc(rate))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import * as actionTypes from './actionTypes';\n\nexport const findRateSelect = rate => {\n    return {\n        type: actionTypes.FIND_RATE_SELECT,\n        toCurrency: rate\n    };\n};\n\nconst findRateResult = rateValue => {\n    return {\n        type: actionTypes.FIND_RATE_RESULT,\n        baseValue: 1,\n        currencyValue: rateValue\n    };\n};\n\nexport const findRateCalc = rateValue => {\n    return dispatch => {\n        const value = Math.round(rateValue * 100) / 100;\n        dispatch(findRateResult(value));\n    };\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    base: '',\n    date: '',\n    rates: {}\n}\n\n//GET DATA\nconst getDataStart = state => {\n    return {\n        ...state\n    };\n};\n\nconst getDataSuccess = (state, action) => {\n    return {\n        ...state,\n        ...action.currencyExchange\n    };\n};\n\nconst getDataFail = (state, action) => {\n    return {\n        ...state,\n        error: action.error\n    };\n};\n\n//UPDATE\nconst updateSuccess = (state, action) => {\n    return {\n        ...state,\n        ...action.currencyExchange\n    };\n};\n\nconst updateFail = (state, action) => {\n    return {\n        ...state,\n        error: action.error\n    };\n};\n\n//REDUCER\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case actionTypes.GET_DATA_START: return getDataStart(state);\n        case actionTypes.GET_DATA_SUCCESS: return getDataSuccess(state, action);\n        case actionTypes.GET_DATA_FAIL: return getDataFail(state, action);\n        case actionTypes.UPDATE_SUCCESS: return updateSuccess(state, action);\n        case actionTypes.UPDATE_FAIL: return updateFail(state, action);\n        default: return state;\n    }\n}\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    toCurrency: null,\n    baseValue: 0,\n    currencyValue: 0\n}\n\nconst findRateSelect = (state, action) => {\n    return {\n        ...state,\n        toCurrency: action.toCurrency\n    }\n}\n\nconst findRateResult = (state, action) => {\n    return {\n        ...state,\n        baseValue: action.baseValue,\n        currencyValue: action.currencyValue\n    }\n}\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case actionTypes.FIND_RATE_SELECT: return findRateSelect(state, action);\n        case actionTypes.FIND_RATE_RESULT: return findRateResult(state, action);\n        default: return state;\n    }\n}\n\nexport default reducer;","import { combineReducers } from 'redux';\n\nimport getData from './getData';\nimport findRate from './findRate';\n\nexport const rootReducer = combineReducers ({\n    getData: getData,\n    findRate: findRate\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport { rootReducer } from './store/reducers/index';\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(reduxThunk)\n));\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}